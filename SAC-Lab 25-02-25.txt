25-02-2025

1.   	Write Python script which demonstrate the use of various data types (Scaler)  and their types
# Demonstrating different scalar data types in Python

# Integer (int)
integer_value = 10
print(f"Integer: {integer_value}, Type: {type(integer_value)}")

# Floating-point (float)
float_value = 20.5
print(f"Float: {float_value}, Type: {type(float_value)}")

# Complex Number (complex)
complex_value = 3 + 4j
print(f"Complex: {complex_value}, Type: {type(complex_value)}")

# Boolean (bool)
boolean_value = True
print(f"Boolean: {boolean_value}, Type: {type(boolean_value)}")

# String (str)
string_value = "Hello, World!"
print(f"String: '{string_value}', Type: {type(string_value)}")

# Bytes (bytes)
bytes_value = b"ByteString"
print(f"Bytes: {bytes_value}, Type: {type(bytes_value)}")

# NoneType (None)
none_value = None
print(f"NoneType: {none_value}, Type: {type(none_value)}")

OUTPUT:
Integer: 10, Type: <class 'int'>
Float: 20.5, Type: <class 'float'>
Complex: (3+4j), Type: <class 'complex'>
Boolean: True, Type: <class 'bool'>
String: 'Hello, World!', Type: <class 'str'>
Bytes: b'ByteString', Type: <class 'bytes'>
NoneType: None, Type: <class 'NoneType'>




2.      Write python script which make use of print statement and without print statement

# Using print statement
print("Hello, this is a Python script using print statement!")
OUTPUT:
                           Hello, this is a Python script using print statement!

# Without using print statement (writing to a file)
with open("output.txt", "w") as file:
	file.write("Hello, this is a Python script without using print statement!\n")

# Another method - using logging
import logging

logging.basicConfig(level=logging.INFO)
logging.info("Hello, this message is displayed using logging instead of print!")
OUTPUT:
                        INFO:root:Hello, this message is displayed using logging instead of print!








3.       Write a python script which calculates the area of a rectangle using the length and width. Then, calculate the perimeter of the rectangle.

# Function to calculate area and perimeter of a rectangle
def rectangle_area_perimeter(length, width):
	area = length * width
	perimeter = 2 * (length + width)
	return area, perimeter

# Taking user input
length = float(input("Enter the length of the rectangle: "))
width = float(input("Enter the width of the rectangle: "))

# Calculating area and perimeter
area, perimeter = rectangle_area_perimeter(length, width)

# Displaying results
print(f"Area of the rectangle: {area}")
print(f"Perimeter of the rectangle: {perimeter}")

OUTPUT:
Enter the length of the rectangle: 6
Enter the width of the rectangle: 4
Area of the rectangle: 24.0
Perimeter of the rectangle: 20.0

4.   Program which performs all arithmetic operations ( +  -  *  /  %)
# Function to perform arithmetic operations
def arithmetic_operations(a, b):
	addition = a + b
	subtraction = a - b
	multiplication = a * b
	division = a / b if b != 0 else "Undefined (Division by zero)"
	modulus = a % b if b != 0 else "Undefined (Modulus by zero)"
    
	return addition, subtraction, multiplication, division, modulus

# Taking user input
num1 = float(input("Enter first number: "))
num2 = float(input("Enter second number: "))

# Performing operations
add, sub, mul, div, mod = arithmetic_operations(num1, num2)

# Displaying results
print(f"Addition: {num1} + {num2} = {add}")
print(f"Subtraction: {num1} - {num2} = {sub}")
print(f"Multiplication: {num1} * {num2} = {mul}")
print(f"Division: {num1} / {num2} = {div}")
print(f"Modulus: {num1} % {num2} = {mod}")

OUTPUT:

Enter first number: 4
Enter second number: 6
Addition: 4.0 + 6.0 = 10.0
Subtraction: 4.0 - 6.0 = -2.0
Multiplication: 4.0 * 6.0 = 24.0
Division: 4.0 / 6.0 = 0.6666666666666666
Modulus: 4.0 % 6.0 = 4.0




5. Write a Python program that takes two numbers as input and compares them using the following 

                          # Taking user input
num1 = float(input("Enter the first number: "))
num2 = float(input("Enter the second number: "))

# Performing comparisons
print(f"{num1} == {num2} : {num1 == num2}")  # Equal to
print(f"{num1} != {num2} : {num1 != num2}")  # Not equal to
print(f"{num1} > {num2}  : {num1 > num2}")   # Greater than
print(f"{num1} < {num2}  : {num1 < num2}")   # Less than
print(f"{num1} >= {num2} : {num1 >= num2}")  # Greater than or equal to
print(f"{num1} <= {num2} : {num1 <= num2}")  # Less than or equal to
OUTPUT:
Enter the first number: 3
Enter the second number: 6
3.0 == 6.0 : False
3.0 != 6.0 : True
3.0 > 6.0  : False
3.0 < 6.0  : True
3.0 >= 6.0 : False
                            3.0 <= 6.0 : True






6.    Write a program that checks whether a number is positive and even. Use logical operators (and, or, not) to combine the two conditions.

# Taking user input
num = int(input("Enter a number: "))

# Checking conditions using logical operators
is_positive = num > 0
is_even = num % 2 == 0

# Using logical operators
if is_positive and is_even:
	print(f"{num} is positive and even.")
elif not is_positive and is_even:
	print(f"{num} is even but not positive (negative).")
elif is_positive and not is_even:
	print(f"{num} is positive but odd.")
else:
	print(f"{num} is negative and odd.")
OUTPUT:
Enter a number: 3
                            3 is positive but odd.




7.       Write a Python program that demonstrates the use of operator precedence by calculating the result of the expression: 
10 + 3 * 2 ** 2 – 5
                          # Given expression
result = 10 + 3 * 2 ** 2 - 5
                         # Display the result
print("Result of the expression 10 + 3 * 2 ** 2 - 5 is:", result)
OUTPUT:
                              Result of the expression 10 + 3 * 2 ** 2 - 5 is: 17






























                                          
8.       Write a Python program that evaluates the following complex expression and prints the result:
(5 + 3) * (2 ** 2) / 4 + 7 - (6 % 2)

a=1
b=4
c=5
d=4
print(a+b+c/d) # c/d 5/4= 1.25 1+4+1.25=6.25
print((a+b)+c/d)# (a+b) (1+4=5) c/d=1.25  (5)+1.25= 6.25
print((a+b)+((c-d))) # c-d= 5-4=1  a+b= 5 i.e 5+1=6
print(10 + 3 * 2 ** 2-5) # 2**2=4 3*4 = 12 i.e 10+12-5 22-5=17
print((5 + 3) * (2 ** 2) / 4 + 7 - (6 % 2))
(5 + 3) * (2 ** 2) / 4 + 7 - (6 % 2)
(5 + 1) * (2 ** 2) / 4 + 7 - (6 % 2)

OUTPUT:
6.25
6.25
6
17
15.0




13.0


















9.      Write a Python program that demonstrates the use of pre-increment and post-increment (simulated in Python by += 1 and x + 1) on a variable.

# Initial variable
x = 5

# Pre-increment (Simulated using `+= 1`)
pre_increment = x
x += 1  # Increment first, then assign to x
print(f"Pre-Increment: {pre_increment} -> {x}")  # Value of x after pre-increment

# Post-increment (Simulated using `x + 1`)
post_increment = x  # Store the current value of x for post-increment
x = x + 1  # Increment x, then assign back to x
print(f"Post-Increment: {post_increment} -> {x}")  # Value of x after post-increment

OUTPUT:
Pre-Increment: 5 -> 6
Post-Increment: 6 -> 7








10.       Write a program that takes a number n as input and prints all the numbers from 1 to n that are divisible by both 3 and 5.

    	# Taking user input for n
n = int(input("Enter a number: "))

# Loop through numbers from 1 to n
for i in range(1, n + 1):
	if i % 3 == 0 and i % 5 == 0:
    	print(i)

OUTPUT:
Enter a number: 3

11. program to make use of tuples and their methods

	# accessing tuples elements
	my_tuple = (1, 2, 3, 4)
	print(my_tuple[1])  # Output: 2
	# slicing tuples elements
	my_tuple = (1, 2, 3, 4, 5)
	print(my_tuple[1:4])  # Output: (2, 3, 4)
	# concatenation tuples elements
	tuple1 = (1, 2)
	tuple2 = (3, 4)
	result = tuple1 + tuple2
	print(result)  # Output: (1, 2, 3, 4)
	# multiplication tuples elements
	my_tuple = (1, 2)
	result = my_tuple * 3
	print(result)  # Output: (1, 2, 1, 2, 1, 2)
	# length of  tuples elements
	my_tuple = (1, 2, 3, 4)
	print(len(my_tuple))  # Output: 4
	# membership tuples elements
	my_tuple = (1, 2, 3, 4)
	print(2 in my_tuple)  # Output: True
	print(5 in my_tuple)  # Output: False
	# upacking tuples elements
	my_tuple = (1, 2, 3)
	a, b, c = my_tuple
	print(a, b, c)  # Output: 1 2 3
	# iterating through tuples elements
	my_tuple = (1, 2, 3)
	for item in my_tuple:
	    print(item)
OUTPUT:
	2
	(2, 3, 4)
	(1, 2, 3, 4)
	(1, 2, 1, 2, 1, 2)
	4
	True
	False
	1 2 3
	1
	2
	3






12. write a python script to perform the following operations on the arays
a.Download and Install numpy
      
   pip install numpy|
            OR
  conda install numpy



b.Create a single dimensional array and work with following functions 
sum mean min max shape size dtype STD reshape reverse transpose square
 
import numpy as np
arr1=np.array([1,2,3,4,5,6])
print("1D array:",arr1)
print("1D sum:",np.sum(arr1))
print("1D mean:",np.mean(arr1))
print("1D minimum:",np.min(arr1))
print("1D max:",np.max(arr1))
print("1D shape:",np.shape(arr1))
print("1D size:",np.size(arr1))
print("1D array datatype:",arr1.dtype)
print("1D standard devition:",np.std(arr1))
print("1D reshape:",arr1.reshape(6,1))
print("1D reverse:",arr1[-6:])
print("1D transpose:",arr1.T)
print("1D square:",np.square(arr1))

output

1D array: [1 2 3 4 5 6]
1D sum: 21
1D mean: 3.5
1D minimum: 1
1D max: 6
1D shape: (6,)
1D size: 6
1D array datatype: int32
1D standard deviation: 1.707825127659933
1D reshape: [[1]
 [2]
 [3]
 [4]
 [5]
 [6]]
1D reverse: [1 2 3 4 5 6]
1D transpose: [1 2 3 4 5 6]
1D square: [ 1  4  9 16 25 36]


c.Create a two dimensional array and work with following functions
sum mean min max shape size dtype STD reshape reverse transpose square   show any 5 indexing slices,Hstack,Vstack and Dot

import numpy as np
arr1 = np.array([[1,2,3],[3,2,1]])
print("2D array:",arr1)
print("2D sum:",np.sum(arr1))
print("2D mean:",np.mean(arr1))
print("2D minimum:",np.min(arr1))
print("2D max:",np.max(arr1))
print("2D shape:",np.shape(arr1))
print("2D size:",np.size(arr1))
print("2D array datatype:",arr1.dtype)
print("2D standard deviation:",np.std(arr1))
print("2D reshape:",arr1.reshape(1,6))
print("2D reverse:",arr1[-2:][-2:])
print("2D transpose:",arr1.T)
print("2D square :",np.square(arr1))
print("2D 1 slicing:",arr1[0:1][:])#[[1 2 3]]
print("2D 2 slicing:",arr1[:][-2:-1])#[[1 2 3]]
print("2D 3 slicing:",arr1[0:1][:-2])#[]
print("2D 4 slicing:",arr1[-2:][1:])#[[3 2 1]]
print("2D 5 slicing:",arr1[1][1:2])#[2]
print("2D vertical stack:",np.hstack(arr1))
print("2D horizontal stack:",np.vstack(arr1))

output

2D array: [[1 2 3]
 [3 2 1]]
2D sum: 12
2D mean: 2.0
2D minimum: 1
2D max: 3
2D shape: (2, 3)
2D size: 6
2D array datatype: int32
2D standard deviation: 0.816496580927726
2D reshape: [[1 2 3 3 2 1]]
2D reverse: [[1 2 3]
 [3 2 1]]
2D transpose: [[1 3]
 [2 2]
 [3 1]]
2D square : [[1 4 9]
 [9 4 1]]
2D 1 slicing: [[1 2 3]]
2D 2 slicing: [[1 2 3]]
2D 3 slicing: []
2D 4 slicing: [[3 2 1]]
2D 5 slicing: [2]
2D vertical stack: [1 2 3 3 2 1]
2D horizontal stack: [[1 2 3]
 [3 2 1]]







d.Arithmetic functions add,sub and mul

                import numpy as np
	arr1=np.array([1,2,3,4,5,6])
	arr2=np.array([1,2,3,4,5,6])
	print("2D addition:",np.add(arr1,arr2))
	print("2D subtraction :",arr2-arr1)
	print("2D sum:",arr1*arr2)



OUTPUT:
	2D addition: [ 2  4  6  8 10 12]
	2D subtraction : [0 0 0 0 0 0]
	2D sum: [ 1  4  9 16 25 36]





e.Trigonometric functions sin cos tan


import numpy as np
arr1=np.array([0,30,45,60,90])
print(" sin:",np.sin(arr1))
print(" cos:",np.cos(arr1))
print(" tan:",np.tan(arr1))




output

sin: [ 0.         -0.98803162  0.85090352 -0.30481062  0.89399666]
 cos: [ 1.          0.15425145  0.52532199 -0.95241298 -0.44807362]
 tan: [ 0.         -6.4053312   1.61977519  0.32004039 -1.99520041]
